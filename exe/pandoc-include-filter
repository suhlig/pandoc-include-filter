#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')

require 'optparse'
require 'paru/filter'
require 'pandoc/include_filter/version'
require 'pandoc/include_filter/included_file'

begin
  OptionParser.new do |opts|
    opts.banner = <<~BANNER
      A Pandoc filter that includes files declared with #include filename. See http://www.pandoc.org/filters.html for general filter usage.
      Usage: pandoc --filter pandoc-include-filter [OPTIONS] [FILES]
    BANNER

    opts.version = "v.#{Pandoc::IncludeFilter::VERSION}"
  end.parse!
rescue OptionParser::InvalidOption => e
  warn e.message
  exit 1
end

Paru::Filter.run do
  with 'CodeBlock' do |code_block|
    command, included_file_path, *classes = code_block.string.strip.split(' ')

    if command == '#include'
      included_file = Pandoc::IncludeFilter::IncludedFile.new(included_file_path).pathname

      if !included_file.exist?
        warn "Warning: Could not read included file #{included_file_path} \
        (resolved to absolute path #{included_file}). Keeping literal statement."
      else
        code_block.string = included_file.read

        classes.each do |c|
          code_block.attr.classes.push(c)
        end
      end
    end
  end
end
